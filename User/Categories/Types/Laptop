REPORT ZSH_OS_EL_LAPTOP.

TABLES:  ZSH_OS_CAT, ZSH_OS_CART,ZSH_OS_LOGIN.
TYPES: BEGIN OF TY_CAT,
         PID   TYPE ZSH_OS_CAT-PID,
         NAME  TYPE ZSH_OS_CAT-NAME,
         PRICE TYPE ZSH_OS_CAT-PRICE,
         STOCK TYPE ZSH_OS_CAT-STOCK,
       END OF TY_CAT.




TYPES: BEGIN OF TY_HIDE,
         PID TYPE ZSH_OS_CAT-PID,
       END OF TY_HIDE.

DATA: IT_ELECTRONICS TYPE TABLE OF TY_CAT,
      WA_ELECTRONICS TYPE TY_CAT.

DATA : CONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       GRID       TYPE REF TO CL_GUI_ALV_GRID,
       CONTAINER1 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       GRID1      TYPE REF TO CL_GUI_ALV_GRID.

DATA: IT_FCAT TYPE LVC_T_FCAT,
      WA_FCAT TYPE LVC_S_FCAT.

DATA: IT_HIDE TYPE TABLE OF TY_HIDE,
      WA_HIDE TYPE TY_HIDE.

DATA: IT_ELECTRONICS2 TYPE TABLE OF  ZSH_OS_CAT,
      WA_ELECTRONICS2 TYPE  ZSH_OS_CAT.

DATA: IT_CART TYPE TABLE OF ZSH_OS_CART,
      WA_CART TYPE ZSH_OS_CART.
CLASS LCL_RCVR_CLASS DEFINITION.
  PUBLIC SECTION.
    METHODS :
      HANDLE_DOUBLE_CLICK FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW E_COLUMN.
ENDCLASS.                    "lcl_rcvr_class DEFINITION
*----------------------------------------------------------------------
* Local Class Implementation.
*----------------------------------------------------------------------
CLASS LCL_RCVR_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM DISPLAY.
  ENDMETHOD.
ENDCLASS.
DATA: LP_RCVR TYPE REF TO LCL_RCVR_CLASS.

START-OF-SELECTION.
  SELECT PID NAME PRICE STOCK FROM ZSH_OS_CAT INTO TABLE IT_ELECTRONICS WHERE CATEGORY = 'ELECTRONICS' AND TYPE = 'LAPTOP'.
  WA_FCAT-COL_POS = '1'.
  WA_FCAT-FIELDNAME = 'PID'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_CAT'.
  WA_FCAT-TABNAME = 'IT_ELECTRONICS'.
  WA_FCAT-COLTEXT = 'Product Id'.
  WA_FCAT-SELTEXT = 'Product Id'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C3'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  WA_FCAT-COL_POS = '2'.
  WA_FCAT-FIELDNAME = 'NAME'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_CAT'.
  WA_FCAT-TABNAME = 'IT_ELECTRONICS'.
  WA_FCAT-COLTEXT = 'Product Name'.
  WA_FCAT-SELTEXT = 'Product Name'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C4'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  WA_FCAT-COL_POS = '3'.
  WA_FCAT-FIELDNAME = 'PRICE'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_CAT'.
  WA_FCAT-TABNAME = 'IT_ELECTRONICS'.
  WA_FCAT-COLTEXT = 'Price'.
  WA_FCAT-SELTEXT = 'Price'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C5'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  WA_FCAT-COL_POS = '4'.
  WA_FCAT-FIELDNAME = 'STOCK'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_CAT'.
  WA_FCAT-TABNAME = 'IT_ELECTRONICS'.
  WA_FCAT-COLTEXT = 'Stock'.
  WA_FCAT-SELTEXT = 'Stock'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C6'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.



  CALL SCREEN 1000.

*&---------------------------------------------------------------------*
*&      Module  STATUS_1000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_1000 OUTPUT.
  SET PF-STATUS 'ZSHMENU'.
  SET TITLEBAR 'xxx'.
  GET PARAMETER ID 'CAR' FIELD ZSH_OS_LOGIN-EMAIL.
  IF CONTAINER IS INITIAL.
    CREATE OBJECT CONTAINER
      EXPORTING
*       PARENT         =
        CONTAINER_NAME = 'CONTLAP'
*       STYLE          =
*       LIFETIME       = lifetime_default
*       REPID          =
*       DYNNR          =
*       NO_AUTODEF_PROGID_DYNNR     =
*  EXCEPTIONS
*       CNTL_ERROR     = 1
*       CNTL_SYSTEM_ERROR           = 2
*       CREATE_ERROR   = 3
*       LIFETIME_ERROR = 4
*       LIFETIME_DYNPRO_DYNPRO_LINK = 5
*       OTHERS         = 6
      .
    IF SY-SUBRC <> 0.
* MESSSHE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
  IF GRID IS INITIAL.
    CREATE OBJECT GRID
      EXPORTING
*       I_SHELLSTYLE      = 0
*       I_LIFETIME        =
        I_PARENT = CONTAINER
*       I_APPL_EVENTS     = space
*       I_PARENTDBG       =
*       I_APPLOGPARENT    =
*       I_GRAPHICSPARENT  =
*       I_NAME   =
*       I_FCAT_COMPLETE   = SPACE
*  EXCEPTIONS
*       ERROR_CNTL_CREATE = 1
*       ERROR_CNTL_INIT   = 2
*       ERROR_CNTL_LINK   = 3
*       ERROR_DP_CREATE   = 4
*       OTHERS   = 5
      .
    IF SY-SUBRC <> 0.
* MESSSHE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
  CALL METHOD GRID->SET_TABLE_FOR_FIRST_DISPLAY
*  EXPORTING
*    I_BUFFER_ACTIVE               =
*    I_BYPASSING_BUFFER            =
*    I_CONSISTENCY_CHECK           =
*    I_STRUCTURE_NAME              = ' '
*    IS_VARIANT                    =
*    I_SAVE                        =
*    I_DEFAULT                     = 'X'
*    IS_LAYOUT                     =
*    IS_PRINT                      =
*    IT_SPECIAL_GROUPS             =
*    IT_TOOLBAR_EXCLUDING          =
*    IT_HYPERLINK                  =
*    IT_ALV_GRAPHICS               =
*    IT_EXCEPT_QINFO               =
*    IR_SALV_ADAPTER               =
    CHANGING
      IT_OUTTAB       = IT_ELECTRONICS
      IT_FIELDCATALOG = IT_FCAT
*     IT_SORT         =
*     IT_FILTER       =
*  EXCEPTIONS
*     INVALID_PARAMETER_COMBINATION = 1
*     PROGRAM_ERROR   = 2
*     TOO_MANY_LINES  = 3
*     OTHERS          = 4
    .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
  CREATE OBJECT LP_RCVR.
  SET HANDLER LP_RCVR->HANDLE_DOUBLE_CLICK FOR GRID.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_1000 INPUT.
  CASE SY-UCOMM.
    WHEN 'BK'.
      CALL TRANSACTION 'ZSHCAT'.
    WHEN 'EX'.
      LEAVE PROGRAM.
    WHEN 'LG'.
      CALL TRANSACTION 'ZSHLG'.

    WHEN 'ATC'.
      WA_CART-PID = ZSH_OS_CAT-PID.
      WA_CART-PNAME = ZSH_OS_CAT-NAME.
      WA_CART-CATEGORY = 'ELECTRONICS'.
      WA_CART-TYPE = 'LAPTOP'.
      WA_CART-PRICE = ZSH_OS_CAT-PRICE.
      WA_CART-QTY = ZSH_OS_CART-QTY.
      WA_CART-EMAIL = ZSH_OS_LOGIN-EMAIL.
      WA_CART-AMOUNT = WA_CART-QTY * WA_CART-PRICE.


      IF SY-SUBRC = 0.
        DATA: STCK TYPE ZSH_OS_CAT-STOCK.
        SELECT SINGLE * FROM ZSH_OS_CAT WHERE PID = ZSH_OS_CAT-PID.
        IF ZSH_OS_CART-QTY <= ZSH_OS_CAT-STOCK.
          STCK = ZSH_OS_CAT-STOCK - ZSH_OS_CART-QTY.

          UPDATE ZSH_OS_CAT SET STOCK = STCK WHERE PID = ZSH_OS_CAT-PID.

           INSERT ZSH_OS_CART FROM WA_CART.
          CLEAR ZSH_OS_CAT.
          CLEAR ZSH_OS_CART-QTY.
          SUBMIT ZSH_OS_EL_LAPTOP.
        ELSE.
          MESSSHE 'Out Of Stock' TYPE 'I' DISPLAY LIKE 'E'.
        ENDIF.
      ELSE.
        MESSSHE 'Product Already Added in Cart' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY .
  DATA : W_LINES   TYPE I,
         W_LINENO  TYPE LVC_T_ROW,
         W_LINENO1 TYPE LVC_T_CELL,
         WA        LIKE LINE OF W_LINENO,
         WA1       LIKE LINE OF W_LINENO,
         INDEX     TYPE I.
  CALL METHOD GRID->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = W_LINENO.

  LOOP AT W_LINENO INTO WA.
    READ TABLE IT_ELECTRONICS INDEX WA-INDEX INTO WA_ELECTRONICS .
    IF SY-SUBRC = 0.
      WA_HIDE-PID = WA_ELECTRONICS-PID.
      APPEND WA_HIDE TO IT_HIDE.
    ENDIF.
  ENDLOOP.

  IF NOT IT_HIDE IS INITIAL.

    SELECT SINGLE * FROM ZSH_OS_CAT INTO WA_ELECTRONICS2 WHERE PID = WA_HIDE-PID.
    SELECT SINGLE * FROM ZSH_OS_CAT WHERE PID  = WA_ELECTRONICS2-PID.
    CALL SCREEN 1000.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  SHOW_LOGO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SHOW_LOGO OUTPUT.
    DATA: W_LINES TYPE I.
  TYPES PICT_LINE(256) TYPE C.
  DATA :

  EDITOR TYPE REF TO CL_GUI_TEXTEDIT,
  PICTURE TYPE REF TO CL_GUI_PICTURE,
  PICT_TAB TYPE TABLE OF PICT_LINE,
  URL(255) TYPE C.
  DATA: GRAPHIC_URL(255).
  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.
  DATA: GRAPHIC_SIZE TYPE I.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  .
  CALL METHOD CL_GUI_CFW=>FLUSH.
  CREATE OBJECT:
  CONTAINER1 EXPORTING CONTAINER_NAME = 'CONTLOGO',
  PICTURE EXPORTING PARENT = CONTAINER1.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT       = 'GRAPHICS'
      P_NAME         = 'logo'
      P_ID           = 'BMAP'
      P_BTYPE        = 'BCOL'
    RECEIVING
      P_BMP          = L_GRAPHIC_XSTR
*  EXCEPTIONS
*    NOT_FOUND      = 1
*    INTERNAL_ERROR = 2
*    others         = 3
          .
  IF SY-SUBRC <> 0.
* MESSSHE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMSHE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.
  CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
    EXPORTING
      URL = URL.
  CALL METHOD PICTURE->SET_DISPLAY_MODE
    EXPORTING
      DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.
ENDMODULE.

REPORT ZSH_OS_DEBIT.

TABLES: ZSH_OS_LOGIN,
        ZSH_OS_PAYMENT,
        ZSH_OS_CART,
        ZSH_OS_CAT,
        ZSH_OS_REGISTER,
        ZSH_OS_ADD,
        ZSH_OS_BILL,
        ZSH_OS_BILL_H.

TYPES:BEGIN OF TY_PAY,
        EMAIL   TYPE ZSH_OS_PAYMENT-EMAIL,
        CARDNO  TYPE ZSH_OS_PAYMENT-CARDNO,
        NAME    TYPE ZSH_OS_PAYMENT-NAME,
        EXPMON  TYPE ZSH_OS_PAYMENT-EXPMON,
        EXPYEAR TYPE ZSH_OS_PAYMENT-EXPYEAR,
      END OF TY_PAY.

TYPES:BEGIN OF TY_PAY1,
        CARDNO  TYPE ZSH_OS_PAYMENT-CARDNO,
        NAME    TYPE ZSH_OS_PAYMENT-NAME,
        EXPMON  TYPE ZSH_OS_PAYMENT-EXPMON,
        EXPYEAR TYPE ZSH_OS_PAYMENT-EXPYEAR,
      END OF TY_PAY1.

TYPES: BEGIN OF TY_CAT,
         PID      TYPE ZSH_OS_CART-PID,
         PNAME    TYPE ZSH_OS_CART-PNAME,
         CATEGORY TYPE ZSH_OS_CART-CATEGORY,
         TYPE     TYPE ZSH_OS_CART-TYPE,
         PRICE    TYPE ZSH_OS_CART-PRICE,
         QTY      TYPE ZSH_OS_CART-QTY,
         AMOUNT   TYPE ZSH_OS_CART-AMOUNT,
       END OF TY_CAT.

TYPES: BEGIN OF TY_BILL,
         BILLNO TYPE ZSH_OS_BILL-BILLNO,
         EMAIL  TYPE ZSH_OS_BILL-EMAIL,
         PID    TYPE ZSH_OS_BILL-PID,
         PNAME  TYPE ZSH_OS_BILL-PNAME,
         PRICE  TYPE ZSH_OS_BILL-PRICE,
         QTY    TYPE ZSH_OS_BILL-QTY,
         AMOUNT TYPE ZSH_OS_BILL-AMOUNT,
       END OF TY_BILL.

TYPES: BEGIN OF TY_BILL_N,
         BILLNO TYPE ZSH_OS_BILL-BILLNO,
       END OF TY_BILL_N.

TYPES: BEGIN OF TY_BILL_H,
         BILLNO TYPE ZSH_OS_BILL_H-BILLNO,
         EMAIL  TYPE ZSH_OS_BILL_H-EMAIL,
         BDATE  TYPE ZSH_OS_BILL_H-BDATE,
         BTIME  TYPE ZSH_OS_BILL_H-BTIME,
         AMOUNT TYPE ZSH_OS_BILL_H-AMOUNT,
       END OF TY_BILL_H.


TYPES: BEGIN OF TY_HIDE,
         CARDNO TYPE ZSH_OS_PAYMENT-CARDNO,
       END OF TY_HIDE.

DATA: IT_PAY TYPE TABLE OF TY_PAY,
      WA_PAY TYPE TY_PAY.

DATA: IT_PAY3 TYPE TABLE OF TY_PAY1,
      WA_PAY3 TYPE TY_PAY1.

DATA: IT_PAY2 TYPE TABLE OF ZSH_OS_PAYMENT,
      WA_PAY2 TYPE ZSH_OS_PAYMENT.

DATA: IT_CART TYPE TABLE OF ZSH_OS_CART,
      WA_CART TYPE ZSH_OS_CART.

DATA: IT_BILL TYPE TABLE OF TY_BILL,
      WA_BILL TYPE TY_BILL.

DATA: IT_BILL_N TYPE TABLE OF TY_BILL_N,
      WA_BILL_N TYPE TY_BILL_N.

DATA: IT_BILL_H TYPE TABLE OF TY_BILL_H,
      WA_BILL_H TYPE TY_BILL_H.


DATA : CONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       GRID       TYPE REF TO CL_GUI_ALV_GRID,
       CONTAINER1 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       GRID1      TYPE REF TO CL_GUI_ALV_GRID.

DATA: CDNO(16).

DATA: IT_HIDE TYPE TABLE OF TY_HIDE,
      WA_HIDE TYPE TY_HIDE.

DATA: IT_FCAT TYPE LVC_T_FCAT,
      WA_FCAT TYPE LVC_S_FCAT.

DATA: USER_RESPONSE,
      USER_RESPONSE1.

DATA: BILLN TYPE ZSH_OS_BILL-BILLNO,
      AMNT  TYPE ZSH_OS_CART-AMOUNT.

CLASS LCL_RCVR_CLASS DEFINITION.
  PUBLIC SECTION.
    METHODS :
      HANDLE_DOUBLE_CLICK FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW E_COLUMN.
ENDCLASS.                    "lcl_rcvr_class DEFINITION
*----------------------------------------------------------------------
* Local Class Implementation.
*----------------------------------------------------------------------
CLASS LCL_RCVR_CLASS IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM DISPLAY.
  ENDMETHOD.
ENDCLASS.
DATA: LP_RCVR TYPE REF TO LCL_RCVR_CLASS.

START-OF-SELECTION.

  WA_FCAT-COL_POS = '1'.
  WA_FCAT-FIELDNAME = 'CARDNO'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_PAYMENT'.
  WA_FCAT-TABNAME = 'IT_PAY3'.
  WA_FCAT-COLTEXT = 'Card Number'.
  WA_FCAT-SELTEXT = 'Card Number'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C3'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  WA_FCAT-COL_POS = '2'.
  WA_FCAT-FIELDNAME = 'NAME'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_PAYMENT'.
  WA_FCAT-TABNAME = 'IT_PAY3'.
  WA_FCAT-COLTEXT = 'Name On Card'.
  WA_FCAT-SELTEXT = 'Name On Card'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C5'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  WA_FCAT-COL_POS = '3'.
  WA_FCAT-FIELDNAME = 'EXPMON'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_PAYMENT'.
  WA_FCAT-TABNAME = 'IT_PAY3'.
  WA_FCAT-COLTEXT = 'Expiry Month'.
  WA_FCAT-SELTEXT = 'Expiry Month'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C1'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  WA_FCAT-COL_POS = '4'.
  WA_FCAT-FIELDNAME = 'EXPYEAR'.
  WA_FCAT-REF_TABLE = 'ZSH_OS_PAYMENT'.
  WA_FCAT-TABNAME = 'IT_PAY3'.
  WA_FCAT-COLTEXT = 'Expiry Year'.
  WA_FCAT-SELTEXT = 'Expiry Year'.
  WA_FCAT-OUTPUTLEN = 20.
  WA_FCAT-EMPHASIZE = 'C4'.
  APPEND WA_FCAT TO IT_FCAT.
  CLEAR WA_FCAT.

  CALL SCREEN 1000.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_1000 INPUT.
  CASE SY-UCOMM.
    WHEN 'SC'.
      CDNO = ZSH_OS_PAYMENT-CARDNO.
       IF STRLEN( CDNO ) = 16 AND CDNO CP '4*'.
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TITLEBAR              = 'User Prompt'
              TEXT_QUESTION         = 'Do you want to save the card?'
              TEXT_BUTTON_1         = 'YES'(001)
              TEXT_BUTTON_2         = 'NO'(002)
              DEFAULT_BUTTON        = '1' " Yes, of course you like ABAP programs
              DISPLAY_CANCEL_BUTTON = 'X'
            IMPORTING
              ANSWER                = USER_RESPONSE
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          IF SY-SUBRC <> 0.
            WRITE 'An error occured with this program'.
            EXIT.
          ENDIF.

          IF USER_RESPONSE = '1'.
            WA_PAY-EMAIL = ZSH_OS_LOGIN-EMAIL.
            WA_PAY-CARDNO = ZSH_OS_PAYMENT-CARDNO.
            WA_PAY-NAME = ZSH_OS_PAYMENT-NAME.
            WA_PAY-EXPMON = ZSH_OS_PAYMENT-EXPMON.
            WA_PAY-EXPYEAR = ZSH_OS_PAYMENT-EXPYEAR.
            INSERT ZSH_OS_PAYMENT FROM WA_PAY.
            SUBMIT ZSH_OS_DEBIT.
          ENDIF.
              ELSE.
          MESSSHE 'Card Not Valid' TYPE 'I' DISPLAY LIKE 'E'.
        ENDIF.


    WHEN 'PAY'.
      CDNO = ZSH_OS_PAYMENT-CARDNO.

      SELECT PID
     EMAIL
     PNAME
     CATEGORY
     TYPE
     PRICE
     QTY
     AMOUNT FROM ZSH_OS_CART INTO TABLE IT_CART WHERE EMAIL = ZSH_OS_LOGIN-EMAIL.

      SELECT BILLNO FROM ZSH_OS_BILL INTO WA_BILL_N ORDER BY BILLNO.
      ENDSELECT.
      BILLN = WA_BILL_N + 1.
      LOOP AT IT_CART INTO WA_CART.
        WA_BILL-PID = WA_CART-PID.
        WA_BILL-BILLNO = BILLN.
        WA_BILL-EMAIL = ZSH_OS_LOGIN-EMAIL.
        WA_BILL-AMOUNT = WA_CART-AMOUNT.
        WA_BILL-QTY = WA_CART-QTY.
        WA_BILL-PRICE = WA_CART-PRICE.
        WA_BILL-PNAME = WA_CART-PNAME.
        AMNT = AMNT + WA_CART-AMOUNT.
        APPEND WA_BILL TO IT_BILL.
      ENDLOOP.
      WA_BILL_H-BILLNO = BILLN.
      WA_BILL_H-EMAIL = ZSH_OS_LOGIN-EMAIL.
      WA_BILL_H-BDATE = SY-DATUM.
      WA_BILL_H-BTIME = SY-UZEIT.
      WA_BILL_H-AMOUNT = AMNT.


      INSERT ZSH_OS_BILL FROM TABLE IT_BILL.
      INSERT ZSH_OS_BILL_H FROM WA_BILL_H.
      DELETE FROM ZSH_OS_CART WHERE EMAIL = ZSH_OS_LOGIN-EMAIL.


*      SELECT SINGLE * FROM ZSH_OS_PAYMENT WHERE CARDNO = ZSH_OS_PAYMENT-CARDNO.
*
*      IF SY-SUBRC <> 0.

        IF STRLEN( CDNO ) = 16 AND CDNO CP '4*'.


          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TITLEBAR              = 'User Prompt'
              TEXT_QUESTION         = 'Are you sure you want to pay?'
              TEXT_BUTTON_1         = 'YES'(001)
              TEXT_BUTTON_2         = 'NO'(002)
              DEFAULT_BUTTON        = '1' " Yes, of course you like ABAP programs
              DISPLAY_CANCEL_BUTTON = 'X'
            IMPORTING
              ANSWER                = USER_RESPONSE1
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          IF SY-SUBRC <> 0.
            WRITE 'An error occured with this program'.
            EXIT.
          ENDIF.

          IF USER_RESPONSE1 = '1'.
            PERFORM BILL.
          ENDIF.

        ELSE.
          MESSSHE 'Card Not Valid' TYPE 'I' DISPLAY LIKE 'E'.
        ENDIF.
*      ENDIF.

       WHEN 'EXIT'.
         LEAVE PROGRAM.

       WHEN 'BACK'.
         CALL TRANSACTION 'ZSHPAY'.

  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_1000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_1000 OUTPUT.
  SET PF-STATUS 'ZSHMENU'.
*  SET TITLEBAR 'xxx'.
  DATA: AMNT1 TYPE ZSH_OS_CART-AMOUNT.
*  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR 'xxx'.
  GET PARAMETER ID 'CAR' FIELD ZSH_OS_LOGIN-EMAIL.
  SELECT * FROM ZSH_OS_CART WHERE EMAIL = ZSH_OS_LOGIN-EMAIL.
    AMNT1 = AMNT1 + ZSH_OS_CART-AMOUNT.
  ENDSELECT.
  ZSH_OS_CART-AMOUNT = AMNT1.
  CLEAR AMNT1.
  CASE SY-UCOMM.
    WHEN 'NC'.
      LOOP AT SCREEN.
        IF SCREEN-NAME = 'ZSH_OS_PAYMENT-CARDNO'.
          SCREEN-INPUT = 1.
          MODIFY SCREEN.
        ENDIF.

        IF SCREEN-NAME = 'ZSH_OS_PAYMENT-NAME'.
          SCREEN-INPUT = 1.
          MODIFY SCREEN.
        ENDIF.

        IF SCREEN-NAME = 'ZSH_OS_PAYMENT-EXPMON'.
          SCREEN-INPUT = 1.
          MODIFY SCREEN.
        ENDIF.

        IF SCREEN-NAME = 'ZSH_OS_PAYMENT-EXPYEAR'.
          SCREEN-INPUT = 1.
          MODIFY SCREEN.
        ENDIF.

        IF SCREEN-NAME = 'CVV'.
          SCREEN-INPUT = 1.
          MODIFY SCREEN.
        ENDIF.

      ENDLOOP.
  ENDCASE.
 SELECT CARDNO NAME EXPMON EXPYEAR FROM ZSH_OS_PAYMENT INTO TABLE  IT_PAY3 WHERE EMAIL = ZSH_OS_LOGIN-EMAIL.
  IF CONTAINER IS INITIAL.
    CREATE OBJECT CONTAINER
      EXPORTING
*       PARENT         =
        CONTAINER_NAME = 'CONTAINER'
*       STYLE          =
*       LIFETIME       = lifetime_default
*       REPID          =
*       DYNNR          =
*       NO_AUTODEF_PROGID_DYNNR     =
*  EXCEPTIONS
*       CNTL_ERROR     = 1
*       CNTL_SYSTEM_ERROR           = 2
*       CREATE_ERROR   = 3
*       LIFETIME_ERROR = 4
*       LIFETIME_DYNPRO_DYNPRO_LINK = 5
*       OTHERS         = 6
      .
    IF SY-SUBRC <> 0.
* MESSSHE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
  IF GRID IS INITIAL.
    CREATE OBJECT GRID
      EXPORTING
*       I_SHELLSTYLE      = 0
*       I_LIFETIME        =
        I_PARENT = CONTAINER
*       I_APPL_EVENTS     = space
*       I_PARENTDBG       =
*       I_APPLOGPARENT    =
*       I_GRAPHICSPARENT  =
*       I_NAME   =
*       I_FPAYMENT_COMPLETE   = SPACE
*  EXCEPTIONS
*       ERROR_CNTL_CREATE = 1
*       ERROR_CNTL_INIT   = 2
*       ERROR_CNTL_LINK   = 3
*       ERROR_DP_CREATE   = 4
*       OTHERS   = 5
      .
    IF SY-SUBRC <> 0.
* MESSSHE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
  ENDIF.
  CALL METHOD GRID->SET_TABLE_FOR_FIRST_DISPLAY
  "   EXPORTING
*     I_BUFFER_ACTIVE  =
*     I_BYPASSING_BUFFER            =
*     I_CONSISTENCY_CHECK           =
  "      I_STRUCTURE_NAME = 'ZSH_OS_PAYMENT'
*     IS_VARIANT       =
*     I_SAVE           =
*     I_DEFAULT        = 'X'
*     IS_LAYOUT        =
*     IS_PRINT         =
*     IT_SPECIAL_GROUPS             =
*     IT_TOOLBAR_EXCLUDING          =
*     IT_HYPERLINK     =
*     IT_ALV_GRAPHICS  =
*     IT_EXCEPT_QINFO  =
*     IR_SALV_ADAPTER  =
    CHANGING
      IT_OUTTAB       = IT_PAY3
      IT_FIELDCATALOG = IT_FCAT
*     IT_SORT         =
*     IT_FILTER       =
*  EXCEPTIONS
*     INVALID_PARAMETER_COMBINATION = 1
*     PROGRAM_ERROR   = 2
*     TOO_MANY_LINES  = 3
*     OTHERS          = 4
    .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  CREATE OBJECT LP_RCVR.
  SET HANDLER LP_RCVR->HANDLE_DOUBLE_CLICK FOR GRID.
ENDMODULE.

FORM DISPLAY .
  DATA : W_LINES   TYPE I,
         W_LINENO  TYPE LVC_T_ROW,
         W_LINENO1 TYPE LVC_T_CELL,
         WA        LIKE LINE OF W_LINENO,
         WA1       LIKE LINE OF W_LINENO,
         INDEX     TYPE I.
  CALL METHOD GRID->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = W_LINENO.

  LOOP AT W_LINENO INTO WA.
    READ TABLE IT_PAY3 INDEX WA-INDEX INTO WA_PAY3 .
    IF SY-SUBRC = 0.
      WA_HIDE-CARDNO = WA_PAY3-CARDNO.
      APPEND WA_HIDE TO IT_HIDE.
    ENDIF.
  ENDLOOP.

  IF NOT IT_HIDE IS INITIAL.

    SELECT SINGLE * FROM ZSH_OS_PAYMENT INTO WA_PAY2 WHERE CARDNO = WA_HIDE-CARDNO.
    SELECT SINGLE * FROM ZSH_OS_PAYMENT WHERE CARDNO = WA_PAY2-CARDNO.

    CALL SCREEN 1000.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BILL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BILL .

  DATA: WA_REG  TYPE ZSH_OS_REGISTER,
        WA_ADDR TYPE ZSH_OS_ADD,
        WA_BILL TYPE  ZSH_OS_BILL_H.

  DATA: IT_BD TYPE ZSH_TT_BILL,
        WA_BD TYPE ZSH_STR_BILL.


DATA: CONTROL        TYPE SSFCTRLOP, "Smart Forms: Control structure
      OUTPUT_OPTIONS TYPE SSFCOMPOP. "Smart Composer (transfer) options


  SELECT SINGLE * FROM ZSH_OS_REGISTER INTO WA_REG WHERE EMAIL = ZSH_OS_LOGIN-EMAIL.
  SELECT SINGLE * FROM ZSH_OS_ADD INTO WA_ADDR WHERE EMAIL = ZSH_OS_LOGIN-EMAIL.
  SELECT SINGLE * FROM ZSH_OS_BILL_H INTO WA_BILL WHERE EMAIL = ZSH_OS_LOGIN-EMAIL AND BILLNO = BILLN.
  SELECT * FROM ZSH_OS_BILL INTO TABLE IT_BD WHERE EMAIL = ZSH_OS_LOGIN-EMAIL AND BILLNO = BILLN.

CONTROL-PREVIEW = 'X'.
CONTROL-NO_DIALOG = 'X'.
OUTPUT_OPTIONS-TDDEST = 'LP01'.



  CALL FUNCTION '/1BCDWB/SF00000540'
    EXPORTING
*     ARCHIVE_INDEX              =
*     ARCHIVE_INDEX_TAB          =
*     ARCHIVE_PARAMETERS         =
     CONTROL_PARAMETERS         = CONTROL
*     MAIL_APPL_OBJ              =
*     MAIL_RECIPIENT             =
*     MAIL_SENDER                =
     OUTPUT_OPTIONS             = OUTPUT_OPTIONS
     USER_SETTINGS              = ' '
      WA_REG  = WA_REG
      WA_ADDR = WA_ADDR
      WA_BILL = WA_BILL
      IT_BD   = IT_BD
* IMPORTING
*     DOCUMENT_OUTPUT_INFO       =
*     JOB_OUTPUT_INFO            =
*     JOB_OUTPUT_OPTIONS         =
* EXCEPTIONS
*     FORMATTING_ERROR           = 1
*     INTERNAL_ERROR             = 2
*     SEND_ERROR                 = 3
*     USER_CANCELED              = 4
*     OTHERS  = 5
    .
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  SHOW_LOGO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SHOW_LOGO OUTPUT.
  DATA: W_LINES TYPE I.
  TYPES PICT_LINE(256) TYPE C.
  DATA :
    CONTAINER2 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
    EDITOR     TYPE REF TO CL_GUI_TEXTEDIT,
    PICTURE    TYPE REF TO CL_GUI_PICTURE,
    PICT_TAB   TYPE TABLE OF PICT_LINE,
    URL(255)   TYPE C.
  DATA: GRAPHIC_URL(255).
  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.
  DATA: GRAPHIC_SIZE TYPE I.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  .
  CALL METHOD CL_GUI_CFW=>FLUSH.
  CREATE OBJECT:
  CONTAINER2 EXPORTING CONTAINER_NAME = 'CONTLOGO',
  PICTURE EXPORTING PARENT = CONTAINER2.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = 'logo'
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR
*  EXCEPTIONS
*     NOT_FOUND      = 1
*     INTERNAL_ERROR = 2
*     others   = 3
    .
  IF SY-SUBRC <> 0.
* MESSSHE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMSHE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.
  CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
    EXPORTING
      URL = URL.
  CALL METHOD PICTURE->SET_DISPLAY_MODE
    EXPORTING
      DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.
ENDMODULE.
